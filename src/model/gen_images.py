import os
import random
from datetime import datetime
from PIL import Image, ImageDraw, ImageFont
import piexif

# Configuração
num_groups = 10                  # número de grupos de localização (“prédios”)
images_per_group = 5             # imagens por grupo
image_size = (800, 600)          # tamanho das imagens
proximity_threshold = 0.001      # limiar de proximidade em graus
max_direction_error = 30         # erro máximo em graus para direções similares
output_dir = "output_images"     # diretório de saída

# Cores de fundo para diferentes grupos (para visualização)
group_colors = [
    (255, 200, 200), (200, 255, 200), (200, 200, 255),
    (255, 255, 200), (255, 200, 255), (200, 255, 255),
    (240, 240, 240), (255, 220, 180), (220, 180, 255),
    (180, 255, 220),
]

os.makedirs(output_dir, exist_ok=True)

def to_deg(value, ref_pos, ref_neg):
    """Converte decimal para (graus, minutos, segundos, ref) do EXIF GPS."""
    if value < 0:
        ref = ref_neg
        value = -value
    else:
        ref = ref_pos
    deg = int(value)
    min_f = (value - deg) * 60
    m = int(min_f)
    sec = (min_f - m) * 60
    return ((deg,1), (m,1), (int(sec*100),100), ref)

def generate_group_centers(n):
    """Gera centros de grupos bem distribuídos pelo mundo."""
    regions = [
        {"lat_min": -60, "lat_max": -30, "lon_min": -180, "lon_max": -60},  # América do Sul
        {"lat_min": 20,  "lat_max": 60,  "lon_min": -130, "lon_max": -60},  # América do Norte
        {"lat_min": 35,  "lat_max": 60,  "lon_min": -10,  "lon_max": 40},   # Europa
        {"lat_min": 0,   "lat_max": 35,  "lon_min": -20,  "lon_max": 50},   # África
        {"lat_min": 20,  "lat_max": 60,  "lon_min": 60,   "lon_max": 140},  # Ásia
        {"lat_min": -40, "lat_max": -10, "lon_min": 110,  "lon_max": 155},  # Austrália
    ]
    centers = []
    for i in range(n):
        reg = regions[i % len(regions)]
        lat = random.uniform(reg["lat_min"], reg["lat_max"])
        lon = random.uniform(reg["lon_min"], reg["lon_max"])
        centers.append((lat, lon))
    return centers

group_centers = generate_group_centers(num_groups)
print(f"Gerando {num_groups} grupos de {images_per_group} imagens cada…")

for g_idx, (c_lat, c_lon) in enumerate(group_centers, start=1):
    color = group_colors[(g_idx-1) % len(group_colors)]
    # definir quantas imagens vão compartilhar direção similar
    share_count = random.randint(1, min(5, images_per_group))
    base_dir = random.uniform(0, 360)
    share_idxs = random.sample(range(images_per_group), share_count)

    print(f"\nGrupo {g_idx} centro em ({c_lat:.6f},{c_lon:.6f}), "
          f"{share_count} imgs terão direção base ~{base_dir:.1f}°")

    for i in range(images_per_group):
        # posição próxima ao centro
        lat = c_lat + random.uniform(-proximity_threshold*0.9, proximity_threshold*0.9)
        lon = c_lon + random.uniform(-proximity_threshold*0.9, proximity_threshold*0.9)

        # direção: se faz parte do grupo compartilhado, aplica erro ±max_direction_error
        if i in share_idxs:
            error = random.uniform(-max_direction_error, max_direction_error)
            direction = (base_dir + error) % 360
        else:
            direction = random.uniform(0, 360)

        # criar imagem
        img = Image.new('RGB', image_size, color=color)
        draw = ImageDraw.Draw(img)
        try:
            font = ImageFont.truetype("arial.ttf", 20)
        except:
            font = ImageFont.load_default()
        # adicionar texto
        draw.text((10,10),  f"Grupo: {g_idx}",       font=font, fill=(0,0,0))
        draw.text((10,40),  f"Img: {i+1}",            font=font, fill=(0,0,0))
        draw.text((10,70),  f"Lat: {lat:.6f}",        font=font, fill=(0,0,0))
        draw.text((10,100), f"Lon: {lon:.6f}",        font=font, fill=(0,0,0))
        draw.text((10,130), f"Dir: {direction:.1f}°", font=font, fill=(0,0,0))

        # preparar EXIF GPS e direção
        lat_d, lat_m, lat_s, lat_ref = to_deg(lat, 'N', 'S')
        lon_d, lon_m, lon_s, lon_ref = to_deg(lon, 'E', 'W')

        exif = {
            "0th": {
                piexif.ImageIFD.Make:     u"DJI".encode(),
                piexif.ImageIFD.Model:    u"Simulated".encode(),
                piexif.ImageIFD.Software: u"ChatGPT Generator".encode(),
                piexif.ImageIFD.DateTime: datetime.utcnow().strftime("%Y:%m:%d %H:%M:%S").encode(),
            },
            "Exif": {
                piexif.ExifIFD.DateTimeOriginal: datetime.utcnow().strftime("%Y:%m:%d %H:%M:%S").encode(),
                piexif.ExifIFD.UserComment:      b"Generated by script",
            },
            "GPS": {
                piexif.GPSIFD.GPSLatitudeRef:    lat_ref.encode(),
                piexif.GPSIFD.GPSLatitude:       [lat_d, lat_m, lat_s],
                piexif.GPSIFD.GPSLongitudeRef:   lon_ref.encode(),
                piexif.GPSIFD.GPSLongitude:      [lon_d, lon_m, lon_s],
                piexif.GPSIFD.GPSImgDirectionRef: b"T",
                piexif.GPSIFD.GPSImgDirection:   (int(direction*100), 100),
            }
        }

        exif_bytes = piexif.dump(exif)
        fname = f"group{g_idx}_img{i+1}.jpg"
        img.save(os.path.join(output_dir, fname), exif=exif_bytes)
        print(f"  → {fname}: GPS({lat:.6f},{lon:.6f}), dir {direction:.1f}°")

print("\nConcluído! Confira a pasta “output_images”.")
